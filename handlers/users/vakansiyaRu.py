from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import ContentType

from data.config import ADMINS
from loader import dp, db, bot

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from keyboards.default.vakansiyaKeyRu import citykeyRu,filialkeyRu,positionkeyRu,studentkeyRu,salarykeyRu,phonkeyRu,yuborishkeyRu
from keyboards.default.userkey import boshmenuUs,bekorRu

from handlers.users.hrRu import create_hr_Ru

# Shaxsiy ma'lumotlarni yig'sih uchun PersonalData holatdan yaratamiz
class VakansiyaRu(StatesGroup):
    city = State()
    filial = State()
    position = State()
    phon = State()
    name = State()
    date = State()
    addres = State()
    student = State()
    img = State()
    salary = State()
    yuborish = State()





@dp.message_handler(text="üñã –í–∞–∫–∞–Ω—Å–∏—è")
async def startState(message: types.Message):
    user = db.select_user(chat_id=message.from_user.id)
    print(user)
    if user[4]  == "ru":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥!",reply_markup=citykeyRu)
        await VakansiyaRu.city.set()
    else:
        await message.answer(message.text)


@dp.message_handler(state=VakansiyaRu.city)
async def answer_city(message: types.Message, state: FSMContext):
    city = message.text

    await state.update_data(
        {"city": city}
    )

    await message.answer("–í—ã–±–∏—Ä–∞–π—Ç–µ –≤–µ—Ç–∫—É!",reply_markup=filialkeyRu)

    # await PersonalData.email.set()
    await VakansiyaRu.next()


@dp.message_handler(state=VakansiyaRu.filial)
async def answer_city(message: types.Message, state: FSMContext):
    filial = message.text

    await state.update_data(
        {"filial": filial}
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!",reply_markup=positionkeyRu)

    # await PersonalData.email.set()
    await VakansiyaRu.next()


@dp.message_handler(state=VakansiyaRu.position)
async def answer_city(message: types.Message, state: FSMContext):
    position = message.text

    await state.update_data(
        {"position": position}
    )

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!",reply_markup=phonkeyRu)

    # await PersonalData.email.set()
    await VakansiyaRu.next()



@dp.message_handler(state=VakansiyaRu.phon,content_types=types.ContentTypes.CONTACT)
async def answer_city(message: types.Message, state: FSMContext):
    phon = message.contact.phone_number

    await state.update_data(
        {"phon": phon}
    )

    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é \n –Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–µ–º—É—Ä –ö—É—Ä–±–∞–Ω–æ–≤.",reply_markup=bekorRu)

    # await PersonalData.email.set()
    await VakansiyaRu.next()



@dp.message_handler(state=VakansiyaRu.name)
async def answer_city(message: types.Message, state: FSMContext):
    name = message.text

    await state.update_data(
        {"name": name}
    )

    await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—Ä–∏–º–µ—Ä: 07.07.1999")

    # await PersonalData.email.set()
    await VakansiyaRu.next()


@dp.message_handler(state=VakansiyaRu.date)
async def answer_city(message: types.Message, state: FSMContext):
    date = message.text

    await state.update_data(
        {"date": date}
    )

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è! –ü—Ä–∏–º–µ—Ä: –ê–ª–º–∞–∑–∞—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω")

    # await PersonalData.email.set()
    await VakansiyaRu.next()


@dp.message_handler(state=VakansiyaRu.addres)
async def answer_city(message: types.Message, state: FSMContext):
    addres = message.text

    await state.update_data(
        {"addres": addres}
    )

    await message.answer("–¢—ã —Å—Ç—É–¥–µ–Ω—Ç!",reply_markup=studentkeyRu)

    # await PersonalData.email.set()
    await VakansiyaRu.next()


@dp.message_handler(state=VakansiyaRu.student)
async def answer_city(message: types.Message, state: FSMContext):
    student = message.text

    await state.update_data(
        {"student": student}
    )

    await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É",reply_markup=bekorRu)

    # await PersonalData.email.set()
    await VakansiyaRu.next()




@dp.message_handler(content_types=ContentType.ANY,state=VakansiyaRu.img)
async def answer_img(message: types.Message, state: FSMContext):
    if message.content_type == ContentType.PHOTO:
        photo = message.photo[-1]
        file_id = photo.file_id
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path

    # Rasmni faylga yuklash
        await bot.download_file(file_path, f"handlers/users/file/imgs/{message.from_user.id}.jpg")
        #await message.photo[-1].download()
        await message.answer("–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ",reply_markup=salarykeyRu)
        await VakansiyaRu.next()
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É!")




@dp.message_handler(state=VakansiyaRu.salary)
async def answer_city(message: types.Message, state: FSMContext):
    maosh = message.text

    await state.update_data(
        {"maosh": maosh}
    )

    data = await state.get_data()
    city = data.get("city")
    filial = data.get("filial")
    position = data.get("position")
    phon = data.get("phon")
    name = data.get("name")
    date = data.get("date")
    addres = data.get("addres")
    student = data.get("student")
    salary = data.get("maosh")


    msg = "–ë—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    msg += f"–ì–æ—Ä–æ–¥ - {city}\n"
    msg += f"–§–∏–ª–∏–∞–ª - {filial}\n"
    msg += f"–ü–æ–∑–∏—Ü–∏—è: - {position}\n"
    msg += f"—Ç–µ–ª–µ—Ñ–æ–Ω: - {phon}\n"
    msg += f"–ò–º—è: - {name}\n"
    msg += f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: - {date}\n"
    msg += f"–ê–¥—Ä–µ—Å: - {addres}\n"
    msg += f"–°—Ç—É–¥–µ–Ω—Ç: - {student}\n"
    msg += f"–ó–∞—Ä–ø–ª–∞—Ç–∞: - {salary}\n\n"
    msg += f"–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞!"

    await message.answer(msg,reply_markup=yuborishkeyRu)


    malumotlar = [city,filial,position,phon,name,date,addres,student,salary]


    #await bot.send_message(chat_id=1363350178,text=malumotlar)

    img = f"C:/Users/User/Desktop/Hr_bot/handlers/users/file/imgs/{message.from_user.id}.jpg"
    file = f"C:/Users/User/Desktop/Hr_bot/handlers/users/file/files/{message.from_user.id}.pdf"
    
    
    create_hr_Ru(file,img,malumotlar)

    await VakansiyaRu.next()



@dp.message_handler(state=VakansiyaRu.yuborish)
async def yuborish(message: types.Message,state: FSMContext):
    if message.text == "–û—Ç–ø—Ä–∞–≤–∫–∞":
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏–ª!!!",reply_markup=boshmenuUs)
        await state.finish()
        files = f"C:/Users/User/Desktop/Hr_bot/handlers/users/file/files/{message.from_user.id}.pdf"
        with open(files, "rb") as file:
        # Document jo'natish
            await bot.send_document(chat_id=message.from_user.id, document=file)
    elif message.text == "–û—Ç–∫–∞–∑":
        await message.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π!!!",reply_markup=boshmenuUs)
        await state.finish()
        await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

    


